
atmega8a_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000e1a  00000eae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800078  00800078  00000ec6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ec6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001432  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000989  00000000  00000000  000024da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1d  00000000  00000000  00002e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c0  00000000  00000000  00003a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000807  00000000  00000000  00003e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb4  00000000  00000000  00004647  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000052fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	66 c0       	rjmp	.+204    	; 0xce <__ctors_end>
   2:	80 c0       	rjmp	.+256    	; 0x104 <__bad_interrupt>
   4:	7f c0       	rjmp	.+254    	; 0x104 <__bad_interrupt>
   6:	7e c0       	rjmp	.+252    	; 0x104 <__bad_interrupt>
   8:	7d c0       	rjmp	.+250    	; 0x104 <__bad_interrupt>
   a:	7c c0       	rjmp	.+248    	; 0x104 <__bad_interrupt>
   c:	7b c0       	rjmp	.+246    	; 0x104 <__bad_interrupt>
   e:	7a c0       	rjmp	.+244    	; 0x104 <__bad_interrupt>
  10:	79 c0       	rjmp	.+242    	; 0x104 <__bad_interrupt>
  12:	78 c0       	rjmp	.+240    	; 0x104 <__bad_interrupt>
  14:	77 c0       	rjmp	.+238    	; 0x104 <__bad_interrupt>
  16:	af c3       	rjmp	.+1886   	; 0x776 <__vector_11>
  18:	64 c3       	rjmp	.+1736   	; 0x6e2 <__vector_12>
  1a:	74 c0       	rjmp	.+232    	; 0x104 <__bad_interrupt>
  1c:	73 c0       	rjmp	.+230    	; 0x104 <__bad_interrupt>
  1e:	72 c0       	rjmp	.+228    	; 0x104 <__bad_interrupt>
  20:	71 c0       	rjmp	.+226    	; 0x104 <__bad_interrupt>
  22:	70 c0       	rjmp	.+224    	; 0x104 <__bad_interrupt>
  24:	6f c0       	rjmp	.+222    	; 0x104 <__bad_interrupt>
  26:	a0 c1       	rjmp	.+832    	; 0x368 <__EEPROM_REGION_LENGTH__+0x168>
  28:	16 c2       	rjmp	.+1068   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  2a:	15 c2       	rjmp	.+1066   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  2c:	14 c2       	rjmp	.+1064   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  2e:	13 c2       	rjmp	.+1062   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  30:	12 c2       	rjmp	.+1060   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  32:	11 c2       	rjmp	.+1058   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  34:	10 c2       	rjmp	.+1056   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  36:	0f c2       	rjmp	.+1054   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  38:	0e c2       	rjmp	.+1052   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  3a:	0d c2       	rjmp	.+1050   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  3c:	0c c2       	rjmp	.+1048   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  3e:	0b c2       	rjmp	.+1046   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  40:	0a c2       	rjmp	.+1044   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  42:	09 c2       	rjmp	.+1042   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  44:	08 c2       	rjmp	.+1040   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  46:	07 c2       	rjmp	.+1038   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  48:	06 c2       	rjmp	.+1036   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  4a:	05 c2       	rjmp	.+1034   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  4c:	04 c2       	rjmp	.+1032   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  4e:	03 c2       	rjmp	.+1030   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  50:	02 c2       	rjmp	.+1028   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  52:	01 c2       	rjmp	.+1026   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  54:	00 c2       	rjmp	.+1024   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  56:	ff c1       	rjmp	.+1022   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  58:	fe c1       	rjmp	.+1020   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  5a:	fd c1       	rjmp	.+1018   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  5c:	fc c1       	rjmp	.+1016   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  5e:	fb c1       	rjmp	.+1014   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  60:	fa c1       	rjmp	.+1012   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  62:	f9 c1       	rjmp	.+1010   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  64:	f8 c1       	rjmp	.+1008   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  66:	f7 c1       	rjmp	.+1006   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  68:	f6 c1       	rjmp	.+1004   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  6a:	f5 c1       	rjmp	.+1002   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  6c:	f4 c1       	rjmp	.+1000   	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  6e:	f3 c1       	rjmp	.+998    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  70:	f2 c1       	rjmp	.+996    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  72:	f1 c1       	rjmp	.+994    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  74:	f0 c1       	rjmp	.+992    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  76:	ef c1       	rjmp	.+990    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  78:	ee c1       	rjmp	.+988    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  7a:	ed c1       	rjmp	.+986    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  7c:	ec c1       	rjmp	.+984    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  7e:	eb c1       	rjmp	.+982    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  80:	ea c1       	rjmp	.+980    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  82:	e9 c1       	rjmp	.+978    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  84:	e8 c1       	rjmp	.+976    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  86:	e7 c1       	rjmp	.+974    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  88:	e6 c1       	rjmp	.+972    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  8a:	e5 c1       	rjmp	.+970    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  8c:	8f c1       	rjmp	.+798    	; 0x3ac <__EEPROM_REGION_LENGTH__+0x1ac>
  8e:	e3 c1       	rjmp	.+966    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  90:	e2 c1       	rjmp	.+964    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  92:	e1 c1       	rjmp	.+962    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  94:	e0 c1       	rjmp	.+960    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  96:	df c1       	rjmp	.+958    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  98:	de c1       	rjmp	.+956    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  9a:	dd c1       	rjmp	.+954    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  9c:	dc c1       	rjmp	.+952    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  9e:	db c1       	rjmp	.+950    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  a0:	da c1       	rjmp	.+948    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  a2:	c1 c0       	rjmp	.+386    	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
  a4:	dd c0       	rjmp	.+442    	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
  a6:	d7 c1       	rjmp	.+942    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  a8:	f6 c0       	rjmp	.+492    	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
  aa:	d5 c1       	rjmp	.+938    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  ac:	d4 c1       	rjmp	.+936    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  ae:	d3 c1       	rjmp	.+934    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  b0:	d2 c1       	rjmp	.+932    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  b2:	d1 c1       	rjmp	.+930    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  b4:	d0 c1       	rjmp	.+928    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  b6:	cf c1       	rjmp	.+926    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  b8:	ce c1       	rjmp	.+924    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  ba:	95 c1       	rjmp	.+810    	; 0x3e6 <__EEPROM_REGION_LENGTH__+0x1e6>
  bc:	38 c1       	rjmp	.+624    	; 0x32e <__EEPROM_REGION_LENGTH__+0x12e>
  be:	cb c1       	rjmp	.+918    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  c0:	ca c1       	rjmp	.+916    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  c2:	0d c1       	rjmp	.+538    	; 0x2de <__EEPROM_REGION_LENGTH__+0xde>
  c4:	c8 c1       	rjmp	.+912    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  c6:	18 c1       	rjmp	.+560    	; 0x2f8 <__EEPROM_REGION_LENGTH__+0xf8>
  c8:	c6 c1       	rjmp	.+908    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  ca:	c5 c1       	rjmp	.+906    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
  cc:	54 c1       	rjmp	.+680    	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>

000000ce <__ctors_end>:
  ce:	11 24       	eor	r1, r1
  d0:	1f be       	out	0x3f, r1	; 63
  d2:	cf e5       	ldi	r28, 0x5F	; 95
  d4:	d4 e0       	ldi	r29, 0x04	; 4
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	cd bf       	out	0x3d, r28	; 61

000000da <__do_copy_data>:
  da:	10 e0       	ldi	r17, 0x00	; 0
  dc:	a0 e6       	ldi	r26, 0x60	; 96
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	ea e1       	ldi	r30, 0x1A	; 26
  e2:	fe e0       	ldi	r31, 0x0E	; 14
  e4:	02 c0       	rjmp	.+4      	; 0xea <__do_copy_data+0x10>
  e6:	05 90       	lpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	a8 37       	cpi	r26, 0x78	; 120
  ec:	b1 07       	cpc	r27, r17
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0xc>

000000f0 <__do_clear_bss>:
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	a8 e7       	ldi	r26, 0x78	; 120
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	a2 39       	cpi	r26, 0x92	; 146
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	02 d0       	rcall	.+4      	; 0x106 <main>
 102:	89 c6       	rjmp	.+3346   	; 0xe16 <_exit>

00000104 <__bad_interrupt>:
 104:	7d cf       	rjmp	.-262    	; 0x0 <__vectors>

00000106 <main>:
int main(void) {
	//ds1307_handler ds1307_hnd = {};
	char d = 0x31;
	//size_t s = 1;
	
	printf__init(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	16 d0       	rcall	.+44     	; 0x136 <printf__init>
	
    while (1) {
		
	  // printf_("%d:%d:%d\n", ds1307_hnd.hours, ds1307_hnd.minutes, ds1307_hnd.seconds);
	  printf_("%c", d);
 10a:	1f 92       	push	r1
 10c:	81 e3       	ldi	r24, 0x31	; 49
 10e:	8f 93       	push	r24
 110:	80 e6       	ldi	r24, 0x60	; 96
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	9f 93       	push	r25
 116:	8f 93       	push	r24
 118:	22 d0       	rcall	.+68     	; 0x15e <printf_>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	2f e9       	ldi	r18, 0x9F	; 159
 11c:	86 e8       	ldi	r24, 0x86	; 134
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x1a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x24>
 12a:	00 00       	nop
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	ea cf       	rjmp	.-44     	; 0x10a <main+0x4>

00000136 <printf__init>:
	return init_status;
}

status_t putch_(char ch) {
	return uart_write_data(/*&handle,*/ &ch, 1);
}
 136:	e8 e7       	ldi	r30, 0x78	; 120
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	8e e0       	ldi	r24, 0x0E	; 14
 13c:	df 01       	movw	r26, r30
 13e:	1d 92       	st	X+, r1
 140:	8a 95       	dec	r24
 142:	e9 f7       	brne	.-6      	; 0x13e <printf__init+0x8>
 144:	80 ec       	ldi	r24, 0xC0	; 192
 146:	92 e1       	ldi	r25, 0x12	; 18
 148:	a0 e0       	ldi	r26, 0x00	; 0
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	81 87       	std	Z+9, r24	; 0x09
 14e:	92 87       	std	Z+10, r25	; 0x0a
 150:	a3 87       	std	Z+11, r26	; 0x0b
 152:	b4 87       	std	Z+12, r27	; 0x0c
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	86 83       	std	Z+6, r24	; 0x06
 158:	cf 01       	movw	r24, r30
 15a:	7c d2       	rcall	.+1272   	; 0x654 <uart_init>
 15c:	08 95       	ret

0000015e <printf_>:

//todo: количесво символов для вывода, что делать если пустая строка
uint32_t printf_(const char *str,...) {
 15e:	4f 92       	push	r4
 160:	5f 92       	push	r5
 162:	6f 92       	push	r6
 164:	7f 92       	push	r7
 166:	af 92       	push	r10
 168:	bf 92       	push	r11
 16a:	cf 92       	push	r12
 16c:	df 92       	push	r13
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	c8 5c       	subi	r28, 0xC8	; 200
 180:	d1 09       	sbc	r29, r1
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
 18c:	c7 52       	subi	r28, 0x27	; 39
 18e:	df 4f       	sbci	r29, 0xFF	; 255
 190:	e8 80       	ld	r14, Y
 192:	f9 80       	ldd	r15, Y+1	; 0x01
 194:	c9 5d       	subi	r28, 0xD9	; 217
 196:	d0 40       	sbci	r29, 0x00	; 0
	char result_str[100] = {}, arg_buff[100] = {};
 198:	84 e6       	ldi	r24, 0x64	; 100
 19a:	fe 01       	movw	r30, r28
 19c:	31 96       	adiw	r30, 0x01	; 1
 19e:	df 01       	movw	r26, r30
 1a0:	98 2f       	mov	r25, r24
 1a2:	1d 92       	st	X+, r1
 1a4:	9a 95       	dec	r25
 1a6:	e9 f7       	brne	.-6      	; 0x1a2 <printf_+0x44>
 1a8:	ec 59       	subi	r30, 0x9C	; 156
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	df 01       	movw	r26, r30
 1ae:	1d 92       	st	X+, r1
 1b0:	8a 95       	dec	r24
 1b2:	e9 f7       	brne	.-6      	; 0x1ae <printf_+0x50>

    uint32_t i = 0;
    size_t size = 0;
	va_list argptr;

	if (NULL == str) {
 1b4:	e1 14       	cp	r14, r1
 1b6:	f1 04       	cpc	r15, r1
 1b8:	09 f4       	brne	.+2      	; 0x1bc <printf_+0x5e>
 1ba:	66 c1       	rjmp	.+716    	; 0x488 <__stack+0x29>
	    return -1;
	}

	memset(result_str,0,100);
 1bc:	e4 56       	subi	r30, 0x64	; 100
 1be:	f1 09       	sbc	r31, r1
 1c0:	84 e6       	ldi	r24, 0x64	; 100
 1c2:	df 01       	movw	r26, r30
 1c4:	1d 92       	st	X+, r1
 1c6:	8a 95       	dec	r24
 1c8:	e9 f7       	brne	.-6      	; 0x1c4 <printf_+0x66>

	va_start(argptr, str);
 1ca:	6e 01       	movw	r12, r28
 1cc:	bb ed       	ldi	r27, 0xDB	; 219
 1ce:	cb 0e       	add	r12, r27
 1d0:	d1 1c       	adc	r13, r1
//todo: количесво символов для вывода, что делать если пустая строка
uint32_t printf_(const char *str,...) {
	char result_str[100] = {}, arg_buff[100] = {};

    uint32_t i = 0;
    size_t size = 0;
 1d2:	00 e0       	ldi	r16, 0x00	; 0
 1d4:	10 e0       	ldi	r17, 0x00	; 0

//todo: количесво символов для вывода, что делать если пустая строка
uint32_t printf_(const char *str,...) {
	char result_str[100] = {}, arg_buff[100] = {};

    uint32_t i = 0;
 1d6:	41 2c       	mov	r4, r1
 1d8:	51 2c       	mov	r5, r1
 1da:	32 01       	movw	r6, r4

	memset(result_str,0,100);

	va_start(argptr, str);

	while ('\0' != str[i]) {
 1dc:	3c c1       	rjmp	.+632    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
	    if ('%' == str[i]) {
 1de:	85 32       	cpi	r24, 0x25	; 37
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <printf_+0x86>
 1e2:	2b c1       	rjmp	.+598    	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
		   i++;

		   memset(arg_buff,0,100);
 1e4:	fe 01       	movw	r30, r28
 1e6:	eb 59       	subi	r30, 0x9B	; 155
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	84 e6       	ldi	r24, 0x64	; 100
 1ec:	df 01       	movw	r26, r30
 1ee:	1d 92       	st	X+, r1
 1f0:	8a 95       	dec	r24
 1f2:	e9 f7       	brne	.-6      	; 0x1ee <printf_+0x90>

           switch (str[i++])
 1f4:	d3 01       	movw	r26, r6
 1f6:	c2 01       	movw	r24, r4
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	a1 1d       	adc	r26, r1
 1fc:	b1 1d       	adc	r27, r1
 1fe:	f7 01       	movw	r30, r14
 200:	e8 0f       	add	r30, r24
 202:	f9 1f       	adc	r31, r25
 204:	b2 e0       	ldi	r27, 0x02	; 2
 206:	4b 0e       	add	r4, r27
 208:	51 1c       	adc	r5, r1
 20a:	61 1c       	adc	r6, r1
 20c:	71 1c       	adc	r7, r1
 20e:	e0 81       	ld	r30, Z
 210:	8e 2f       	mov	r24, r30
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	fc 01       	movw	r30, r24
 216:	b5 97       	sbiw	r30, 0x25	; 37
 218:	e4 35       	cpi	r30, 0x54	; 84
 21a:	f1 05       	cpc	r31, r1
 21c:	08 f0       	brcs	.+2      	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 21e:	1b c1       	rjmp	.+566    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 220:	ed 5e       	subi	r30, 0xED	; 237
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	09 94       	ijmp
		   {
		   case 'c':
			   sprintf(arg_buff, "%c", va_arg(argptr,int));
 226:	56 01       	movw	r10, r12
 228:	e2 e0       	ldi	r30, 0x02	; 2
 22a:	ae 0e       	add	r10, r30
 22c:	b1 1c       	adc	r11, r1
 22e:	d6 01       	movw	r26, r12
 230:	11 96       	adiw	r26, 0x01	; 1
 232:	8c 91       	ld	r24, X
 234:	11 97       	sbiw	r26, 0x01	; 1
 236:	8f 93       	push	r24
 238:	8c 91       	ld	r24, X
 23a:	8f 93       	push	r24
 23c:	80 e6       	ldi	r24, 0x60	; 96
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	9f 93       	push	r25
 242:	8f 93       	push	r24
 244:	ce 01       	movw	r24, r28
 246:	8b 59       	subi	r24, 0x9B	; 155
 248:	9f 4f       	sbci	r25, 0xFF	; 255
 24a:	9f 93       	push	r25
 24c:	8f 93       	push	r24
 24e:	0b d3       	rcall	.+1558   	; 0x866 <sprintf>
		   break;
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
		   memset(arg_buff,0,100);

           switch (str[i++])
		   {
		   case 'c':
			   sprintf(arg_buff, "%c", va_arg(argptr,int));
 25c:	65 01       	movw	r12, r10
		   break;
 25e:	dd c0       	rjmp	.+442    	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		   case 'd':
			   sprintf(arg_buff, "%d", va_arg(argptr,int));
 260:	56 01       	movw	r10, r12
 262:	b2 e0       	ldi	r27, 0x02	; 2
 264:	ab 0e       	add	r10, r27
 266:	b1 1c       	adc	r11, r1
 268:	f6 01       	movw	r30, r12
 26a:	81 81       	ldd	r24, Z+1	; 0x01
 26c:	8f 93       	push	r24
 26e:	80 81       	ld	r24, Z
 270:	8f 93       	push	r24
 272:	83 e6       	ldi	r24, 0x63	; 99
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	9f 93       	push	r25
 278:	8f 93       	push	r24
 27a:	ce 01       	movw	r24, r28
 27c:	8b 59       	subi	r24, 0x9B	; 155
 27e:	9f 4f       	sbci	r25, 0xFF	; 255
 280:	9f 93       	push	r25
 282:	8f 93       	push	r24
 284:	f0 d2       	rcall	.+1504   	; 0x866 <sprintf>
		   break;
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	0f 90       	pop	r0
		   {
		   case 'c':
			   sprintf(arg_buff, "%c", va_arg(argptr,int));
		   break;
		   case 'd':
			   sprintf(arg_buff, "%d", va_arg(argptr,int));
 292:	65 01       	movw	r12, r10
		   break;
 294:	c2 c0       	rjmp	.+388    	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		   case 'f':
			   sprintf(arg_buff, "%f", va_arg(argptr,double));
 296:	56 01       	movw	r10, r12
 298:	f4 e0       	ldi	r31, 0x04	; 4
 29a:	af 0e       	add	r10, r31
 29c:	b1 1c       	adc	r11, r1
 29e:	d6 01       	movw	r26, r12
 2a0:	13 96       	adiw	r26, 0x03	; 3
 2a2:	8c 91       	ld	r24, X
 2a4:	13 97       	sbiw	r26, 0x03	; 3
 2a6:	8f 93       	push	r24
 2a8:	12 96       	adiw	r26, 0x02	; 2
 2aa:	8c 91       	ld	r24, X
 2ac:	12 97       	sbiw	r26, 0x02	; 2
 2ae:	8f 93       	push	r24
 2b0:	11 96       	adiw	r26, 0x01	; 1
 2b2:	8c 91       	ld	r24, X
 2b4:	11 97       	sbiw	r26, 0x01	; 1
 2b6:	8f 93       	push	r24
 2b8:	8c 91       	ld	r24, X
 2ba:	8f 93       	push	r24
 2bc:	86 e6       	ldi	r24, 0x66	; 102
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	9f 93       	push	r25
 2c2:	8f 93       	push	r24
 2c4:	ce 01       	movw	r24, r28
 2c6:	8b 59       	subi	r24, 0x9B	; 155
 2c8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ca:	9f 93       	push	r25
 2cc:	8f 93       	push	r24
 2ce:	cb d2       	rcall	.+1430   	; 0x866 <sprintf>
		   break;
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
		   break;
		   case 'd':
			   sprintf(arg_buff, "%d", va_arg(argptr,int));
		   break;
		   case 'f':
			   sprintf(arg_buff, "%f", va_arg(argptr,double));
 2da:	65 01       	movw	r12, r10
		   break;
 2dc:	9e c0       	rjmp	.+316    	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		   case 's':
			   strcpy(arg_buff, va_arg(argptr,const char *));
 2de:	56 01       	movw	r10, r12
 2e0:	f2 e0       	ldi	r31, 0x02	; 2
 2e2:	af 0e       	add	r10, r31
 2e4:	b1 1c       	adc	r11, r1
 2e6:	d6 01       	movw	r26, r12
 2e8:	6d 91       	ld	r22, X+
 2ea:	7c 91       	ld	r23, X
 2ec:	ce 01       	movw	r24, r28
 2ee:	8b 59       	subi	r24, 0x9B	; 155
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	b2 d2       	rcall	.+1380   	; 0x858 <strcpy>
 2f4:	65 01       	movw	r12, r10
		   break;
 2f6:	91 c0       	rjmp	.+290    	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		   case 'u':
			   sprintf(arg_buff, "%u", va_arg(argptr,unsigned int));
 2f8:	56 01       	movw	r10, r12
 2fa:	b2 e0       	ldi	r27, 0x02	; 2
 2fc:	ab 0e       	add	r10, r27
 2fe:	b1 1c       	adc	r11, r1
 300:	f6 01       	movw	r30, r12
 302:	81 81       	ldd	r24, Z+1	; 0x01
 304:	8f 93       	push	r24
 306:	80 81       	ld	r24, Z
 308:	8f 93       	push	r24
 30a:	89 e6       	ldi	r24, 0x69	; 105
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	9f 93       	push	r25
 310:	8f 93       	push	r24
 312:	ce 01       	movw	r24, r28
 314:	8b 59       	subi	r24, 0x9B	; 155
 316:	9f 4f       	sbci	r25, 0xFF	; 255
 318:	9f 93       	push	r25
 31a:	8f 93       	push	r24
 31c:	a4 d2       	rcall	.+1352   	; 0x866 <sprintf>
		   break;
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
		   break;
		   case 's':
			   strcpy(arg_buff, va_arg(argptr,const char *));
		   break;
		   case 'u':
			   sprintf(arg_buff, "%u", va_arg(argptr,unsigned int));
 32a:	65 01       	movw	r12, r10
		   break;
 32c:	76 c0       	rjmp	.+236    	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		   case 'p':
			   sprintf(arg_buff, "%p", va_arg(argptr,void *));
 32e:	56 01       	movw	r10, r12
 330:	f2 e0       	ldi	r31, 0x02	; 2
 332:	af 0e       	add	r10, r31
 334:	b1 1c       	adc	r11, r1
 336:	d6 01       	movw	r26, r12
 338:	11 96       	adiw	r26, 0x01	; 1
 33a:	8c 91       	ld	r24, X
 33c:	11 97       	sbiw	r26, 0x01	; 1
 33e:	8f 93       	push	r24
 340:	8c 91       	ld	r24, X
 342:	8f 93       	push	r24
 344:	8c e6       	ldi	r24, 0x6C	; 108
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	9f 93       	push	r25
 34a:	8f 93       	push	r24
 34c:	ce 01       	movw	r24, r28
 34e:	8b 59       	subi	r24, 0x9B	; 155
 350:	9f 4f       	sbci	r25, 0xFF	; 255
 352:	9f 93       	push	r25
 354:	8f 93       	push	r24
 356:	87 d2       	rcall	.+1294   	; 0x866 <sprintf>
		   break;
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
		   break;
		   case 'u':
			   sprintf(arg_buff, "%u", va_arg(argptr,unsigned int));
		   break;
		   case 'p':
			   sprintf(arg_buff, "%p", va_arg(argptr,void *));
 364:	65 01       	movw	r12, r10
		   break;
 366:	59 c0       	rjmp	.+178    	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		   case '%':
			   strcpy(arg_buff, "%");
 368:	85 e2       	ldi	r24, 0x25	; 37
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	a7 96       	adiw	r28, 0x27	; 39
 36e:	9f af       	std	Y+63, r25	; 0x3f
 370:	8e af       	std	Y+62, r24	; 0x3e
 372:	a7 97       	sbiw	r28, 0x27	; 39
		   break;
 374:	52 c0       	rjmp	.+164    	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		   case 'x':
			   sprintf(arg_buff, "%x", va_arg(argptr, int));
 376:	56 01       	movw	r10, r12
 378:	b2 e0       	ldi	r27, 0x02	; 2
 37a:	ab 0e       	add	r10, r27
 37c:	b1 1c       	adc	r11, r1
 37e:	f6 01       	movw	r30, r12
 380:	81 81       	ldd	r24, Z+1	; 0x01
 382:	8f 93       	push	r24
 384:	80 81       	ld	r24, Z
 386:	8f 93       	push	r24
 388:	8f e6       	ldi	r24, 0x6F	; 111
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	9f 93       	push	r25
 38e:	8f 93       	push	r24
 390:	ce 01       	movw	r24, r28
 392:	8b 59       	subi	r24, 0x9B	; 155
 394:	9f 4f       	sbci	r25, 0xFF	; 255
 396:	9f 93       	push	r25
 398:	8f 93       	push	r24
 39a:	65 d2       	rcall	.+1226   	; 0x866 <sprintf>
		   break;
 39c:	0f 90       	pop	r0
 39e:	0f 90       	pop	r0
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
 3a6:	0f 90       	pop	r0
		   break;
		   case '%':
			   strcpy(arg_buff, "%");
		   break;
		   case 'x':
			   sprintf(arg_buff, "%x", va_arg(argptr, int));
 3a8:	65 01       	movw	r12, r10
		   break;
 3aa:	37 c0       	rjmp	.+110    	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		   case 'X':
		       sprintf(arg_buff, "%X", va_arg(argptr, int));
 3ac:	56 01       	movw	r10, r12
 3ae:	f2 e0       	ldi	r31, 0x02	; 2
 3b0:	af 0e       	add	r10, r31
 3b2:	b1 1c       	adc	r11, r1
 3b4:	d6 01       	movw	r26, r12
 3b6:	11 96       	adiw	r26, 0x01	; 1
 3b8:	8c 91       	ld	r24, X
 3ba:	11 97       	sbiw	r26, 0x01	; 1
 3bc:	8f 93       	push	r24
 3be:	8c 91       	ld	r24, X
 3c0:	8f 93       	push	r24
 3c2:	82 e7       	ldi	r24, 0x72	; 114
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	9f 93       	push	r25
 3c8:	8f 93       	push	r24
 3ca:	ce 01       	movw	r24, r28
 3cc:	8b 59       	subi	r24, 0x9B	; 155
 3ce:	9f 4f       	sbci	r25, 0xFF	; 255
 3d0:	9f 93       	push	r25
 3d2:	8f 93       	push	r24
 3d4:	48 d2       	rcall	.+1168   	; 0x866 <sprintf>
		   break;
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
		   break;
		   case 'x':
			   sprintf(arg_buff, "%x", va_arg(argptr, int));
		   break;
		   case 'X':
		       sprintf(arg_buff, "%X", va_arg(argptr, int));
 3e2:	65 01       	movw	r12, r10
		   break;
 3e4:	1a c0       	rjmp	.+52     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		   case 'o':
			   sprintf(arg_buff, "%o", va_arg(argptr, int));
 3e6:	56 01       	movw	r10, r12
 3e8:	b2 e0       	ldi	r27, 0x02	; 2
 3ea:	ab 0e       	add	r10, r27
 3ec:	b1 1c       	adc	r11, r1
 3ee:	f6 01       	movw	r30, r12
 3f0:	81 81       	ldd	r24, Z+1	; 0x01
 3f2:	8f 93       	push	r24
 3f4:	80 81       	ld	r24, Z
 3f6:	8f 93       	push	r24
 3f8:	85 e7       	ldi	r24, 0x75	; 117
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	9f 93       	push	r25
 3fe:	8f 93       	push	r24
 400:	ce 01       	movw	r24, r28
 402:	8b 59       	subi	r24, 0x9B	; 155
 404:	9f 4f       	sbci	r25, 0xFF	; 255
 406:	9f 93       	push	r25
 408:	8f 93       	push	r24
 40a:	2d d2       	rcall	.+1114   	; 0x866 <sprintf>
		   break;
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
		   break;
		   case 'X':
		       sprintf(arg_buff, "%X", va_arg(argptr, int));
		   break;
		   case 'o':
			   sprintf(arg_buff, "%o", va_arg(argptr, int));
 418:	65 01       	movw	r12, r10
		   default:
			   continue;
		   break;
		   }

           size += strlen(arg_buff);
 41a:	be 01       	movw	r22, r28
 41c:	6b 59       	subi	r22, 0x9B	; 155
 41e:	7f 4f       	sbci	r23, 0xFF	; 255
 420:	fb 01       	movw	r30, r22
 422:	01 90       	ld	r0, Z+
 424:	00 20       	and	r0, r0
 426:	e9 f7       	brne	.-6      	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 428:	31 97       	sbiw	r30, 0x01	; 1
 42a:	e6 1b       	sub	r30, r22
 42c:	f7 0b       	sbc	r31, r23
 42e:	0e 0f       	add	r16, r30
 430:	1f 1f       	adc	r17, r31
           strcat(result_str, arg_buff);
 432:	ce 01       	movw	r24, r28
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	05 d2       	rcall	.+1034   	; 0x842 <strcat>
 438:	0e c0       	rjmp	.+28     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
		}
		else {
			result_str[size++] = str[i++];
 43a:	ff ef       	ldi	r31, 0xFF	; 255
 43c:	4f 1a       	sub	r4, r31
 43e:	5f 0a       	sbc	r5, r31
 440:	6f 0a       	sbc	r6, r31
 442:	7f 0a       	sbc	r7, r31
 444:	e1 e0       	ldi	r30, 0x01	; 1
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	ec 0f       	add	r30, r28
 44a:	fd 1f       	adc	r31, r29
 44c:	e0 0f       	add	r30, r16
 44e:	f1 1f       	adc	r31, r17
 450:	80 83       	st	Z, r24
 452:	0f 5f       	subi	r16, 0xFF	; 255
 454:	1f 4f       	sbci	r17, 0xFF	; 255

	memset(result_str,0,100);

	va_start(argptr, str);

	while ('\0' != str[i]) {
 456:	f7 01       	movw	r30, r14
 458:	e4 0d       	add	r30, r4
 45a:	f5 1d       	adc	r31, r5
 45c:	80 81       	ld	r24, Z
 45e:	81 11       	cpse	r24, r1
 460:	be ce       	rjmp	.-644    	; 0x1de <printf_+0x80>
		}
	}

    va_end(argptr);

    result_str[size++] = '\0';
 462:	78 01       	movw	r14, r16
 464:	8f ef       	ldi	r24, 0xFF	; 255
 466:	e8 1a       	sub	r14, r24
 468:	f8 0a       	sbc	r15, r24
 46a:	e1 e0       	ldi	r30, 0x01	; 1
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	ec 0f       	add	r30, r28
 470:	fd 1f       	adc	r31, r29
 472:	e0 0f       	add	r30, r16
 474:	f1 1f       	adc	r31, r17
 476:	10 82       	st	Z, r1
	uart_write_data(/*&handle,*/ result_str, size);
 478:	b7 01       	movw	r22, r14
 47a:	ce 01       	movw	r24, r28
 47c:	01 96       	adiw	r24, 0x01	; 1
 47e:	ed d0       	rcall	.+474    	; 0x65a <uart_write_data>
	return size;
 480:	b7 01       	movw	r22, r14
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	03 c0       	rjmp	.+6      	; 0x48e <__stack+0x2f>
    uint32_t i = 0;
    size_t size = 0;
	va_list argptr;

	if (NULL == str) {
	    return -1;
 488:	6f ef       	ldi	r22, 0xFF	; 255
 48a:	7f ef       	ldi	r23, 0xFF	; 255
 48c:	cb 01       	movw	r24, r22
    va_end(argptr);

    result_str[size++] = '\0';
	uart_write_data(/*&handle,*/ result_str, size);
	return size;
}
 48e:	c8 53       	subi	r28, 0x38	; 56
 490:	df 4f       	sbci	r29, 0xFF	; 255
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	f8 94       	cli
 496:	de bf       	out	0x3e, r29	; 62
 498:	0f be       	out	0x3f, r0	; 63
 49a:	cd bf       	out	0x3d, r28	; 61
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	ff 90       	pop	r15
 4a6:	ef 90       	pop	r14
 4a8:	df 90       	pop	r13
 4aa:	cf 90       	pop	r12
 4ac:	bf 90       	pop	r11
 4ae:	af 90       	pop	r10
 4b0:	7f 90       	pop	r7
 4b2:	6f 90       	pop	r6
 4b4:	5f 90       	pop	r5
 4b6:	4f 90       	pop	r4
 4b8:	08 95       	ret

000004ba <set_data_size_>:
	}

    set_waik_();

    return 0;
}
 4ba:	9c 01       	movw	r18, r24
 4bc:	90 b5       	in	r25, 0x20	; 32
 4be:	90 68       	ori	r25, 0x80	; 128
 4c0:	90 bd       	out	0x20, r25	; 32
 4c2:	8a b1       	in	r24, 0x0a	; 10
 4c4:	8a b9       	out	0x0a, r24	; 10
 4c6:	66 23       	and	r22, r22
 4c8:	d1 f0       	breq	.+52     	; 0x4fe <set_data_size_+0x44>
 4ca:	22 30       	cpi	r18, 0x02	; 2
 4cc:	31 05       	cpc	r19, r1
 4ce:	51 f0       	breq	.+20     	; 0x4e4 <set_data_size_+0x2a>
 4d0:	23 30       	cpi	r18, 0x03	; 3
 4d2:	31 05       	cpc	r19, r1
 4d4:	19 f0       	breq	.+6      	; 0x4dc <set_data_size_+0x22>
 4d6:	23 2b       	or	r18, r19
 4d8:	69 f4       	brne	.+26     	; 0x4f4 <set_data_size_+0x3a>
 4da:	08 c0       	rjmp	.+16     	; 0x4ec <set_data_size_+0x32>
 4dc:	80 b5       	in	r24, 0x20	; 32
 4de:	82 68       	ori	r24, 0x82	; 130
 4e0:	80 bd       	out	0x20, r24	; 32
 4e2:	08 95       	ret
 4e4:	80 b5       	in	r24, 0x20	; 32
 4e6:	84 68       	ori	r24, 0x84	; 132
 4e8:	80 bd       	out	0x20, r24	; 32
 4ea:	08 95       	ret
 4ec:	80 b5       	in	r24, 0x20	; 32
 4ee:	86 68       	ori	r24, 0x86	; 134
 4f0:	80 bd       	out	0x20, r24	; 32
 4f2:	08 95       	ret
 4f4:	80 b5       	in	r24, 0x20	; 32
 4f6:	80 68       	ori	r24, 0x80	; 128
 4f8:	80 bd       	out	0x20, r24	; 32
 4fa:	8a b1       	in	r24, 0x0a	; 10
 4fc:	8a b9       	out	0x0a, r24	; 10
 4fe:	08 95       	ret

00000500 <set_baud_rate_>:
 500:	a0 e0       	ldi	r26, 0x00	; 0
 502:	b0 e0       	ldi	r27, 0x00	; 0
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	aa 1f       	adc	r26, r26
 50a:	bb 1f       	adc	r27, r27
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	aa 1f       	adc	r26, r26
 512:	bb 1f       	adc	r27, r27
 514:	9c 01       	movw	r18, r24
 516:	ad 01       	movw	r20, r26
 518:	22 0f       	add	r18, r18
 51a:	33 1f       	adc	r19, r19
 51c:	44 1f       	adc	r20, r20
 51e:	55 1f       	adc	r21, r21
 520:	22 0f       	add	r18, r18
 522:	33 1f       	adc	r19, r19
 524:	44 1f       	adc	r20, r20
 526:	55 1f       	adc	r21, r21
 528:	60 e4       	ldi	r22, 0x40	; 64
 52a:	72 e4       	ldi	r23, 0x42	; 66
 52c:	8f e0       	ldi	r24, 0x0F	; 15
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	66 d1       	rcall	.+716    	; 0x7fe <__udivmodsi4>
 532:	21 50       	subi	r18, 0x01	; 1
 534:	31 09       	sbc	r19, r1
 536:	30 bd       	out	0x20, r19	; 32
 538:	29 b9       	out	0x09, r18	; 9
 53a:	08 95       	ret

0000053c <init_driver_>:
 53c:	1f 93       	push	r17
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <ready_>
 546:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <init_>
 54a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <init_+0x1>
 54e:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <init_+0x2>
 552:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <init_+0x3>
 556:	fc 01       	movw	r30, r24
 558:	25 85       	ldd	r18, Z+13	; 0x0d
 55a:	26 23       	and	r18, r22
 55c:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <is_un_block_mode_>
 560:	00 97       	sbiw	r24, 0x00	; 0
 562:	79 f4       	brne	.+30     	; 0x582 <init_driver_+0x46>
 564:	8f ef       	ldi	r24, 0xFF	; 255
 566:	9f ef       	ldi	r25, 0xFF	; 255
 568:	dc 01       	movw	r26, r24
 56a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <init_>
 56e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <init_+0x1>
 572:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <init_+0x2>
 576:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <init_+0x3>
 57a:	6f ef       	ldi	r22, 0xFF	; 255
 57c:	7f ef       	ldi	r23, 0xFF	; 255
 57e:	cb 01       	movw	r24, r22
 580:	1e c0       	rjmp	.+60     	; 0x5be <init_driver_+0x82>
 582:	16 2f       	mov	r17, r22
 584:	ec 01       	movw	r28, r24
 586:	87 81       	ldd	r24, Z+7	; 0x07
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	97 df       	rcall	.-210    	; 0x4ba <set_data_size_>
 58c:	61 2f       	mov	r22, r17
 58e:	89 85       	ldd	r24, Y+9	; 0x09
 590:	9a 85       	ldd	r25, Y+10	; 0x0a
 592:	b6 df       	rcall	.-148    	; 0x500 <set_baud_rate_>
 594:	11 23       	and	r17, r17
 596:	81 f0       	breq	.+32     	; 0x5b8 <init_driver_+0x7c>
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	a0 e0       	ldi	r26, 0x00	; 0
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <init_>
 5a4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <init_+0x1>
 5a8:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <init_+0x2>
 5ac:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <init_+0x3>
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	cb 01       	movw	r24, r22
 5b6:	03 c0       	rjmp	.+6      	; 0x5be <init_driver_+0x82>
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	cb 01       	movw	r24, r22
 5be:	df 91       	pop	r29
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	08 95       	ret

000005c6 <set_read_>:
 5c6:	9a b1       	in	r25, 0x0a	; 10
 5c8:	97 7e       	andi	r25, 0xE7	; 231
 5ca:	9a b9       	out	0x0a, r25	; 10
 5cc:	88 23       	and	r24, r24
 5ce:	19 f0       	breq	.+6      	; 0x5d6 <set_read_+0x10>
 5d0:	8a b1       	in	r24, 0x0a	; 10
 5d2:	80 61       	ori	r24, 0x10	; 16
 5d4:	8a b9       	out	0x0a, r24	; 10
 5d6:	08 95       	ret

000005d8 <set_write_>:
 5d8:	9a b1       	in	r25, 0x0a	; 10
 5da:	97 7e       	andi	r25, 0xE7	; 231
 5dc:	9a b9       	out	0x0a, r25	; 10
 5de:	88 23       	and	r24, r24
 5e0:	19 f0       	breq	.+6      	; 0x5e8 <set_write_+0x10>
 5e2:	8a b1       	in	r24, 0x0a	; 10
 5e4:	88 60       	ori	r24, 0x08	; 8
 5e6:	8a b9       	out	0x0a, r24	; 10
 5e8:	08 95       	ret

000005ea <write_un_block_mode_data_>:
 5ea:	8a b1       	in	r24, 0x0a	; 10
 5ec:	8a b9       	out	0x0a, r24	; 10
 5ee:	8a b1       	in	r24, 0x0a	; 10
 5f0:	80 62       	ori	r24, 0x20	; 32
 5f2:	8a b9       	out	0x0a, r24	; 10
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	f0 df       	rcall	.-32     	; 0x5d8 <set_write_>
 5f8:	08 95       	ret

000005fa <set_data_word_>:
 5fa:	5d 9b       	sbis	0x0b, 5	; 11
 5fc:	fe cf       	rjmp	.-4      	; 0x5fa <set_data_word_>
 5fe:	8c b9       	out	0x0c, r24	; 12
 600:	08 95       	ret

00000602 <write_block_mode_data_>:
 602:	cf 92       	push	r12
 604:	df 92       	push	r13
 606:	ef 92       	push	r14
 608:	ff 92       	push	r15
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	e5 df       	rcall	.-54     	; 0x5d8 <set_write_>
 60e:	c1 2c       	mov	r12, r1
 610:	d1 2c       	mov	r13, r1
 612:	76 01       	movw	r14, r12
 614:	0d c0       	rjmp	.+26     	; 0x630 <write_block_mode_data_+0x2e>
 616:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <p_data_>
 61a:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <p_data_+0x1>
 61e:	ec 0d       	add	r30, r12
 620:	fd 1d       	adc	r31, r13
 622:	80 81       	ld	r24, Z
 624:	ea df       	rcall	.-44     	; 0x5fa <set_data_word_>
 626:	8f ef       	ldi	r24, 0xFF	; 255
 628:	c8 1a       	sub	r12, r24
 62a:	d8 0a       	sbc	r13, r24
 62c:	e8 0a       	sbc	r14, r24
 62e:	f8 0a       	sbc	r15, r24
 630:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <size_>
 634:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <size_+0x1>
 638:	a0 e0       	ldi	r26, 0x00	; 0
 63a:	b0 e0       	ldi	r27, 0x00	; 0
 63c:	c8 16       	cp	r12, r24
 63e:	d9 06       	cpc	r13, r25
 640:	ea 06       	cpc	r14, r26
 642:	fb 06       	cpc	r15, r27
 644:	40 f3       	brcs	.-48     	; 0x616 <write_block_mode_data_+0x14>
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	c7 df       	rcall	.-114    	; 0x5d8 <set_write_>
 64a:	ff 90       	pop	r15
 64c:	ef 90       	pop	r14
 64e:	df 90       	pop	r13
 650:	cf 90       	pop	r12
 652:	08 95       	ret

00000654 <uart_init>:
 654:	61 e0       	ldi	r22, 0x01	; 1
 656:	72 df       	rcall	.-284    	; 0x53c <init_driver_>
 658:	08 95       	ret

0000065a <uart_write_data>:
 65a:	9c 01       	movw	r18, r24
 65c:	ab 01       	movw	r20, r22
 65e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <ready_>
 662:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <p_data_+0x1>
 666:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <p_data_>
 66a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <size_+0x1>
 66e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <size_>
 672:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <data_counter_+0x1>
 676:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <data_counter_>
 67a:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <init_>
 67e:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <init_+0x1>
 682:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <init_+0x2>
 686:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <init_+0x3>
 68a:	61 30       	cpi	r22, 0x01	; 1
 68c:	71 05       	cpc	r23, r1
 68e:	81 05       	cpc	r24, r1
 690:	91 05       	cpc	r25, r1
 692:	31 f5       	brne	.+76     	; 0x6e0 <uart_write_data+0x86>
 694:	21 15       	cp	r18, r1
 696:	31 05       	cpc	r19, r1
 698:	e1 f0       	breq	.+56     	; 0x6d2 <uart_write_data+0x78>
 69a:	41 15       	cp	r20, r1
 69c:	51 05       	cpc	r21, r1
 69e:	e9 f0       	breq	.+58     	; 0x6da <uart_write_data+0x80>
 6a0:	30 93 8f 00 	sts	0x008F, r19	; 0x80008f <p_data_+0x1>
 6a4:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <p_data_>
 6a8:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <size_+0x1>
 6ac:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <size_>
 6b0:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <is_un_block_mode_>
 6b4:	88 23       	and	r24, r24
 6b6:	29 f0       	breq	.+10     	; 0x6c2 <uart_write_data+0x68>
 6b8:	98 df       	rcall	.-208    	; 0x5ea <write_un_block_mode_data_>
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	cb 01       	movw	r24, r22
 6c0:	08 95       	ret
 6c2:	9f df       	rcall	.-194    	; 0x602 <write_block_mode_data_>
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <ready_>
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	cb 01       	movw	r24, r22
 6d0:	08 95       	ret
 6d2:	6f ef       	ldi	r22, 0xFF	; 255
 6d4:	7f ef       	ldi	r23, 0xFF	; 255
 6d6:	cb 01       	movw	r24, r22
 6d8:	08 95       	ret
 6da:	6f ef       	ldi	r22, 0xFF	; 255
 6dc:	7f ef       	ldi	r23, 0xFF	; 255
 6de:	cb 01       	movw	r24, r22
 6e0:	08 95       	ret

000006e2 <__vector_12>:
}

//---------------------------------------------interrupts------------------------------------------//

ISR(USART_UDRE_vect)
{
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	0f 92       	push	r0
 6ea:	11 24       	eor	r1, r1
 6ec:	2f 93       	push	r18
 6ee:	3f 93       	push	r19
 6f0:	4f 93       	push	r20
 6f2:	5f 93       	push	r21
 6f4:	6f 93       	push	r22
 6f6:	7f 93       	push	r23
 6f8:	8f 93       	push	r24
 6fa:	9f 93       	push	r25
 6fc:	af 93       	push	r26
 6fe:	bf 93       	push	r27
 700:	ef 93       	push	r30
 702:	ff 93       	push	r31
    if(UCSRB & (true << TXEN))
 704:	53 9b       	sbis	0x0a, 3	; 10
 706:	26 c0       	rjmp	.+76     	; 0x754 <__vector_12+0x72>
	{
	    UDR = p_data_[data_counter_++];
 708:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <p_data_>
 70c:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <p_data_+0x1>
 710:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <data_counter_>
 714:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <data_counter_+0x1>
 718:	ac 01       	movw	r20, r24
 71a:	4f 5f       	subi	r20, 0xFF	; 255
 71c:	5f 4f       	sbci	r21, 0xFF	; 255
 71e:	50 93 87 00 	sts	0x0087, r21	; 0x800087 <data_counter_+0x1>
 722:	40 93 86 00 	sts	0x0086, r20	; 0x800086 <data_counter_>
 726:	f9 01       	movw	r30, r18
 728:	e8 0f       	add	r30, r24
 72a:	f9 1f       	adc	r31, r25
 72c:	80 81       	ld	r24, Z
 72e:	8c b9       	out	0x0c, r24	; 12

		if ( data_counter_ == size_ )
 730:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <data_counter_>
 734:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <data_counter_+0x1>
 738:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <size_>
 73c:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <size_+0x1>
 740:	28 17       	cp	r18, r24
 742:	39 07       	cpc	r19, r25
 744:	39 f4       	brne	.+14     	; 0x754 <__vector_12+0x72>

//---------------------------------------------lower half---------------------------------------------//

static inline void set_interrupt_(int interpt, _Bool do_setting)
{
    UCSRB |= (false << UDRIE) | (false << TXCIE) | (false << RXCIE);
 746:	8a b1       	in	r24, 0x0a	; 10
 748:	8a b9       	out	0x0a, r24	; 10
	    UDR = p_data_[data_counter_++];

		if ( data_counter_ == size_ )
	    {
		    set_interrupt_(tx, false);
		    set_write_(false);
 74a:	80 e0       	ldi	r24, 0x00	; 0
 74c:	45 df       	rcall	.-374    	; 0x5d8 <set_write_>
		    ready_ = true;
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <ready_>
	    }
	}
}
 754:	ff 91       	pop	r31
 756:	ef 91       	pop	r30
 758:	bf 91       	pop	r27
 75a:	af 91       	pop	r26
 75c:	9f 91       	pop	r25
 75e:	8f 91       	pop	r24
 760:	7f 91       	pop	r23
 762:	6f 91       	pop	r22
 764:	5f 91       	pop	r21
 766:	4f 91       	pop	r20
 768:	3f 91       	pop	r19
 76a:	2f 91       	pop	r18
 76c:	0f 90       	pop	r0
 76e:	0f be       	out	0x3f, r0	; 63
 770:	0f 90       	pop	r0
 772:	1f 90       	pop	r1
 774:	18 95       	reti

00000776 <__vector_11>:

ISR(USART_RXC_vect)
{
 776:	1f 92       	push	r1
 778:	0f 92       	push	r0
 77a:	0f b6       	in	r0, 0x3f	; 63
 77c:	0f 92       	push	r0
 77e:	11 24       	eor	r1, r1
 780:	2f 93       	push	r18
 782:	3f 93       	push	r19
 784:	4f 93       	push	r20
 786:	5f 93       	push	r21
 788:	6f 93       	push	r22
 78a:	7f 93       	push	r23
 78c:	8f 93       	push	r24
 78e:	9f 93       	push	r25
 790:	af 93       	push	r26
 792:	bf 93       	push	r27
 794:	ef 93       	push	r30
 796:	ff 93       	push	r31
    p_data_[data_counter_++] = UDR;
 798:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <p_data_>
 79c:	50 91 8f 00 	lds	r21, 0x008F	; 0x80008f <p_data_+0x1>
 7a0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <data_counter_>
 7a4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <data_counter_+0x1>
 7a8:	9c 01       	movw	r18, r24
 7aa:	2f 5f       	subi	r18, 0xFF	; 255
 7ac:	3f 4f       	sbci	r19, 0xFF	; 255
 7ae:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <data_counter_+0x1>
 7b2:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <data_counter_>
 7b6:	fa 01       	movw	r30, r20
 7b8:	e8 0f       	add	r30, r24
 7ba:	f9 1f       	adc	r31, r25
 7bc:	4c b1       	in	r20, 0x0c	; 12
 7be:	40 83       	st	Z, r20

    if ( data_counter_ == size_ )
 7c0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <size_>
 7c4:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <size_+0x1>
 7c8:	28 17       	cp	r18, r24
 7ca:	39 07       	cpc	r19, r25
 7cc:	39 f4       	brne	.+14     	; 0x7dc <__vector_11+0x66>

//---------------------------------------------lower half---------------------------------------------//

static inline void set_interrupt_(int interpt, _Bool do_setting)
{
    UCSRB |= (false << UDRIE) | (false << TXCIE) | (false << RXCIE);
 7ce:	8a b1       	in	r24, 0x0a	; 10
 7d0:	8a b9       	out	0x0a, r24	; 10
    p_data_[data_counter_++] = UDR;

    if ( data_counter_ == size_ )
    {
	    set_interrupt_(rx, false);
	    set_read_(false);
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	f8 de       	rcall	.-528    	; 0x5c6 <set_read_>
 	    ready_ = true;
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <ready_>
    }
}
 7dc:	ff 91       	pop	r31
 7de:	ef 91       	pop	r30
 7e0:	bf 91       	pop	r27
 7e2:	af 91       	pop	r26
 7e4:	9f 91       	pop	r25
 7e6:	8f 91       	pop	r24
 7e8:	7f 91       	pop	r23
 7ea:	6f 91       	pop	r22
 7ec:	5f 91       	pop	r21
 7ee:	4f 91       	pop	r20
 7f0:	3f 91       	pop	r19
 7f2:	2f 91       	pop	r18
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	1f 90       	pop	r1
 7fc:	18 95       	reti

000007fe <__udivmodsi4>:
 7fe:	a1 e2       	ldi	r26, 0x21	; 33
 800:	1a 2e       	mov	r1, r26
 802:	aa 1b       	sub	r26, r26
 804:	bb 1b       	sub	r27, r27
 806:	fd 01       	movw	r30, r26
 808:	0d c0       	rjmp	.+26     	; 0x824 <__udivmodsi4_ep>

0000080a <__udivmodsi4_loop>:
 80a:	aa 1f       	adc	r26, r26
 80c:	bb 1f       	adc	r27, r27
 80e:	ee 1f       	adc	r30, r30
 810:	ff 1f       	adc	r31, r31
 812:	a2 17       	cp	r26, r18
 814:	b3 07       	cpc	r27, r19
 816:	e4 07       	cpc	r30, r20
 818:	f5 07       	cpc	r31, r21
 81a:	20 f0       	brcs	.+8      	; 0x824 <__udivmodsi4_ep>
 81c:	a2 1b       	sub	r26, r18
 81e:	b3 0b       	sbc	r27, r19
 820:	e4 0b       	sbc	r30, r20
 822:	f5 0b       	sbc	r31, r21

00000824 <__udivmodsi4_ep>:
 824:	66 1f       	adc	r22, r22
 826:	77 1f       	adc	r23, r23
 828:	88 1f       	adc	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	1a 94       	dec	r1
 82e:	69 f7       	brne	.-38     	; 0x80a <__udivmodsi4_loop>
 830:	60 95       	com	r22
 832:	70 95       	com	r23
 834:	80 95       	com	r24
 836:	90 95       	com	r25
 838:	9b 01       	movw	r18, r22
 83a:	ac 01       	movw	r20, r24
 83c:	bd 01       	movw	r22, r26
 83e:	cf 01       	movw	r24, r30
 840:	08 95       	ret

00000842 <strcat>:
 842:	fb 01       	movw	r30, r22
 844:	dc 01       	movw	r26, r24
 846:	0d 90       	ld	r0, X+
 848:	00 20       	and	r0, r0
 84a:	e9 f7       	brne	.-6      	; 0x846 <strcat+0x4>
 84c:	11 97       	sbiw	r26, 0x01	; 1
 84e:	01 90       	ld	r0, Z+
 850:	0d 92       	st	X+, r0
 852:	00 20       	and	r0, r0
 854:	e1 f7       	brne	.-8      	; 0x84e <strcat+0xc>
 856:	08 95       	ret

00000858 <strcpy>:
 858:	fb 01       	movw	r30, r22
 85a:	dc 01       	movw	r26, r24
 85c:	01 90       	ld	r0, Z+
 85e:	0d 92       	st	X+, r0
 860:	00 20       	and	r0, r0
 862:	e1 f7       	brne	.-8      	; 0x85c <strcpy+0x4>
 864:	08 95       	ret

00000866 <sprintf>:
 866:	ae e0       	ldi	r26, 0x0E	; 14
 868:	b0 e0       	ldi	r27, 0x00	; 0
 86a:	e8 e3       	ldi	r30, 0x38	; 56
 86c:	f4 e0       	ldi	r31, 0x04	; 4
 86e:	aa c2       	rjmp	.+1364   	; 0xdc4 <__prologue_saves__+0x1c>
 870:	0d 89       	ldd	r16, Y+21	; 0x15
 872:	1e 89       	ldd	r17, Y+22	; 0x16
 874:	86 e0       	ldi	r24, 0x06	; 6
 876:	8c 83       	std	Y+4, r24	; 0x04
 878:	1a 83       	std	Y+2, r17	; 0x02
 87a:	09 83       	std	Y+1, r16	; 0x01
 87c:	8f ef       	ldi	r24, 0xFF	; 255
 87e:	9f e7       	ldi	r25, 0x7F	; 127
 880:	9e 83       	std	Y+6, r25	; 0x06
 882:	8d 83       	std	Y+5, r24	; 0x05
 884:	ae 01       	movw	r20, r28
 886:	47 5e       	subi	r20, 0xE7	; 231
 888:	5f 4f       	sbci	r21, 0xFF	; 255
 88a:	6f 89       	ldd	r22, Y+23	; 0x17
 88c:	78 8d       	ldd	r23, Y+24	; 0x18
 88e:	ce 01       	movw	r24, r28
 890:	01 96       	adiw	r24, 0x01	; 1
 892:	08 d0       	rcall	.+16     	; 0x8a4 <vfprintf>
 894:	ef 81       	ldd	r30, Y+7	; 0x07
 896:	f8 85       	ldd	r31, Y+8	; 0x08
 898:	e0 0f       	add	r30, r16
 89a:	f1 1f       	adc	r31, r17
 89c:	10 82       	st	Z, r1
 89e:	2e 96       	adiw	r28, 0x0e	; 14
 8a0:	e4 e0       	ldi	r30, 0x04	; 4
 8a2:	ac c2       	rjmp	.+1368   	; 0xdfc <__epilogue_restores__+0x1c>

000008a4 <vfprintf>:
 8a4:	ab e0       	ldi	r26, 0x0B	; 11
 8a6:	b0 e0       	ldi	r27, 0x00	; 0
 8a8:	e7 e5       	ldi	r30, 0x57	; 87
 8aa:	f4 e0       	ldi	r31, 0x04	; 4
 8ac:	7d c2       	rjmp	.+1274   	; 0xda8 <__prologue_saves__>
 8ae:	6c 01       	movw	r12, r24
 8b0:	7b 01       	movw	r14, r22
 8b2:	8a 01       	movw	r16, r20
 8b4:	fc 01       	movw	r30, r24
 8b6:	17 82       	std	Z+7, r1	; 0x07
 8b8:	16 82       	std	Z+6, r1	; 0x06
 8ba:	83 81       	ldd	r24, Z+3	; 0x03
 8bc:	81 ff       	sbrs	r24, 1
 8be:	bf c1       	rjmp	.+894    	; 0xc3e <vfprintf+0x39a>
 8c0:	ce 01       	movw	r24, r28
 8c2:	01 96       	adiw	r24, 0x01	; 1
 8c4:	3c 01       	movw	r6, r24
 8c6:	f6 01       	movw	r30, r12
 8c8:	93 81       	ldd	r25, Z+3	; 0x03
 8ca:	f7 01       	movw	r30, r14
 8cc:	93 fd       	sbrc	r25, 3
 8ce:	85 91       	lpm	r24, Z+
 8d0:	93 ff       	sbrs	r25, 3
 8d2:	81 91       	ld	r24, Z+
 8d4:	7f 01       	movw	r14, r30
 8d6:	88 23       	and	r24, r24
 8d8:	09 f4       	brne	.+2      	; 0x8dc <vfprintf+0x38>
 8da:	ad c1       	rjmp	.+858    	; 0xc36 <vfprintf+0x392>
 8dc:	85 32       	cpi	r24, 0x25	; 37
 8de:	39 f4       	brne	.+14     	; 0x8ee <vfprintf+0x4a>
 8e0:	93 fd       	sbrc	r25, 3
 8e2:	85 91       	lpm	r24, Z+
 8e4:	93 ff       	sbrs	r25, 3
 8e6:	81 91       	ld	r24, Z+
 8e8:	7f 01       	movw	r14, r30
 8ea:	85 32       	cpi	r24, 0x25	; 37
 8ec:	21 f4       	brne	.+8      	; 0x8f6 <vfprintf+0x52>
 8ee:	b6 01       	movw	r22, r12
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	c0 d1       	rcall	.+896    	; 0xc74 <fputc>
 8f4:	e8 cf       	rjmp	.-48     	; 0x8c6 <vfprintf+0x22>
 8f6:	91 2c       	mov	r9, r1
 8f8:	21 2c       	mov	r2, r1
 8fa:	31 2c       	mov	r3, r1
 8fc:	ff e1       	ldi	r31, 0x1F	; 31
 8fe:	f3 15       	cp	r31, r3
 900:	d8 f0       	brcs	.+54     	; 0x938 <vfprintf+0x94>
 902:	8b 32       	cpi	r24, 0x2B	; 43
 904:	79 f0       	breq	.+30     	; 0x924 <vfprintf+0x80>
 906:	38 f4       	brcc	.+14     	; 0x916 <vfprintf+0x72>
 908:	80 32       	cpi	r24, 0x20	; 32
 90a:	79 f0       	breq	.+30     	; 0x92a <vfprintf+0x86>
 90c:	83 32       	cpi	r24, 0x23	; 35
 90e:	a1 f4       	brne	.+40     	; 0x938 <vfprintf+0x94>
 910:	23 2d       	mov	r18, r3
 912:	20 61       	ori	r18, 0x10	; 16
 914:	1d c0       	rjmp	.+58     	; 0x950 <vfprintf+0xac>
 916:	8d 32       	cpi	r24, 0x2D	; 45
 918:	61 f0       	breq	.+24     	; 0x932 <vfprintf+0x8e>
 91a:	80 33       	cpi	r24, 0x30	; 48
 91c:	69 f4       	brne	.+26     	; 0x938 <vfprintf+0x94>
 91e:	23 2d       	mov	r18, r3
 920:	21 60       	ori	r18, 0x01	; 1
 922:	16 c0       	rjmp	.+44     	; 0x950 <vfprintf+0xac>
 924:	83 2d       	mov	r24, r3
 926:	82 60       	ori	r24, 0x02	; 2
 928:	38 2e       	mov	r3, r24
 92a:	e3 2d       	mov	r30, r3
 92c:	e4 60       	ori	r30, 0x04	; 4
 92e:	3e 2e       	mov	r3, r30
 930:	2a c0       	rjmp	.+84     	; 0x986 <vfprintf+0xe2>
 932:	f3 2d       	mov	r31, r3
 934:	f8 60       	ori	r31, 0x08	; 8
 936:	1d c0       	rjmp	.+58     	; 0x972 <vfprintf+0xce>
 938:	37 fc       	sbrc	r3, 7
 93a:	2d c0       	rjmp	.+90     	; 0x996 <vfprintf+0xf2>
 93c:	20 ed       	ldi	r18, 0xD0	; 208
 93e:	28 0f       	add	r18, r24
 940:	2a 30       	cpi	r18, 0x0A	; 10
 942:	40 f0       	brcs	.+16     	; 0x954 <vfprintf+0xb0>
 944:	8e 32       	cpi	r24, 0x2E	; 46
 946:	b9 f4       	brne	.+46     	; 0x976 <vfprintf+0xd2>
 948:	36 fc       	sbrc	r3, 6
 94a:	75 c1       	rjmp	.+746    	; 0xc36 <vfprintf+0x392>
 94c:	23 2d       	mov	r18, r3
 94e:	20 64       	ori	r18, 0x40	; 64
 950:	32 2e       	mov	r3, r18
 952:	19 c0       	rjmp	.+50     	; 0x986 <vfprintf+0xe2>
 954:	36 fe       	sbrs	r3, 6
 956:	06 c0       	rjmp	.+12     	; 0x964 <vfprintf+0xc0>
 958:	8a e0       	ldi	r24, 0x0A	; 10
 95a:	98 9e       	mul	r9, r24
 95c:	20 0d       	add	r18, r0
 95e:	11 24       	eor	r1, r1
 960:	92 2e       	mov	r9, r18
 962:	11 c0       	rjmp	.+34     	; 0x986 <vfprintf+0xe2>
 964:	ea e0       	ldi	r30, 0x0A	; 10
 966:	2e 9e       	mul	r2, r30
 968:	20 0d       	add	r18, r0
 96a:	11 24       	eor	r1, r1
 96c:	22 2e       	mov	r2, r18
 96e:	f3 2d       	mov	r31, r3
 970:	f0 62       	ori	r31, 0x20	; 32
 972:	3f 2e       	mov	r3, r31
 974:	08 c0       	rjmp	.+16     	; 0x986 <vfprintf+0xe2>
 976:	8c 36       	cpi	r24, 0x6C	; 108
 978:	21 f4       	brne	.+8      	; 0x982 <vfprintf+0xde>
 97a:	83 2d       	mov	r24, r3
 97c:	80 68       	ori	r24, 0x80	; 128
 97e:	38 2e       	mov	r3, r24
 980:	02 c0       	rjmp	.+4      	; 0x986 <vfprintf+0xe2>
 982:	88 36       	cpi	r24, 0x68	; 104
 984:	41 f4       	brne	.+16     	; 0x996 <vfprintf+0xf2>
 986:	f7 01       	movw	r30, r14
 988:	93 fd       	sbrc	r25, 3
 98a:	85 91       	lpm	r24, Z+
 98c:	93 ff       	sbrs	r25, 3
 98e:	81 91       	ld	r24, Z+
 990:	7f 01       	movw	r14, r30
 992:	81 11       	cpse	r24, r1
 994:	b3 cf       	rjmp	.-154    	; 0x8fc <vfprintf+0x58>
 996:	98 2f       	mov	r25, r24
 998:	9f 7d       	andi	r25, 0xDF	; 223
 99a:	95 54       	subi	r25, 0x45	; 69
 99c:	93 30       	cpi	r25, 0x03	; 3
 99e:	28 f4       	brcc	.+10     	; 0x9aa <vfprintf+0x106>
 9a0:	0c 5f       	subi	r16, 0xFC	; 252
 9a2:	1f 4f       	sbci	r17, 0xFF	; 255
 9a4:	9f e3       	ldi	r25, 0x3F	; 63
 9a6:	99 83       	std	Y+1, r25	; 0x01
 9a8:	0d c0       	rjmp	.+26     	; 0x9c4 <vfprintf+0x120>
 9aa:	83 36       	cpi	r24, 0x63	; 99
 9ac:	31 f0       	breq	.+12     	; 0x9ba <vfprintf+0x116>
 9ae:	83 37       	cpi	r24, 0x73	; 115
 9b0:	71 f0       	breq	.+28     	; 0x9ce <vfprintf+0x12a>
 9b2:	83 35       	cpi	r24, 0x53	; 83
 9b4:	09 f0       	breq	.+2      	; 0x9b8 <vfprintf+0x114>
 9b6:	55 c0       	rjmp	.+170    	; 0xa62 <vfprintf+0x1be>
 9b8:	20 c0       	rjmp	.+64     	; 0x9fa <vfprintf+0x156>
 9ba:	f8 01       	movw	r30, r16
 9bc:	80 81       	ld	r24, Z
 9be:	89 83       	std	Y+1, r24	; 0x01
 9c0:	0e 5f       	subi	r16, 0xFE	; 254
 9c2:	1f 4f       	sbci	r17, 0xFF	; 255
 9c4:	88 24       	eor	r8, r8
 9c6:	83 94       	inc	r8
 9c8:	91 2c       	mov	r9, r1
 9ca:	53 01       	movw	r10, r6
 9cc:	12 c0       	rjmp	.+36     	; 0x9f2 <vfprintf+0x14e>
 9ce:	28 01       	movw	r4, r16
 9d0:	f2 e0       	ldi	r31, 0x02	; 2
 9d2:	4f 0e       	add	r4, r31
 9d4:	51 1c       	adc	r5, r1
 9d6:	f8 01       	movw	r30, r16
 9d8:	a0 80       	ld	r10, Z
 9da:	b1 80       	ldd	r11, Z+1	; 0x01
 9dc:	36 fe       	sbrs	r3, 6
 9de:	03 c0       	rjmp	.+6      	; 0x9e6 <vfprintf+0x142>
 9e0:	69 2d       	mov	r22, r9
 9e2:	70 e0       	ldi	r23, 0x00	; 0
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <vfprintf+0x146>
 9e6:	6f ef       	ldi	r22, 0xFF	; 255
 9e8:	7f ef       	ldi	r23, 0xFF	; 255
 9ea:	c5 01       	movw	r24, r10
 9ec:	38 d1       	rcall	.+624    	; 0xc5e <strnlen>
 9ee:	4c 01       	movw	r8, r24
 9f0:	82 01       	movw	r16, r4
 9f2:	f3 2d       	mov	r31, r3
 9f4:	ff 77       	andi	r31, 0x7F	; 127
 9f6:	3f 2e       	mov	r3, r31
 9f8:	15 c0       	rjmp	.+42     	; 0xa24 <vfprintf+0x180>
 9fa:	28 01       	movw	r4, r16
 9fc:	22 e0       	ldi	r18, 0x02	; 2
 9fe:	42 0e       	add	r4, r18
 a00:	51 1c       	adc	r5, r1
 a02:	f8 01       	movw	r30, r16
 a04:	a0 80       	ld	r10, Z
 a06:	b1 80       	ldd	r11, Z+1	; 0x01
 a08:	36 fe       	sbrs	r3, 6
 a0a:	03 c0       	rjmp	.+6      	; 0xa12 <vfprintf+0x16e>
 a0c:	69 2d       	mov	r22, r9
 a0e:	70 e0       	ldi	r23, 0x00	; 0
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <vfprintf+0x172>
 a12:	6f ef       	ldi	r22, 0xFF	; 255
 a14:	7f ef       	ldi	r23, 0xFF	; 255
 a16:	c5 01       	movw	r24, r10
 a18:	17 d1       	rcall	.+558    	; 0xc48 <strnlen_P>
 a1a:	4c 01       	movw	r8, r24
 a1c:	f3 2d       	mov	r31, r3
 a1e:	f0 68       	ori	r31, 0x80	; 128
 a20:	3f 2e       	mov	r3, r31
 a22:	82 01       	movw	r16, r4
 a24:	33 fc       	sbrc	r3, 3
 a26:	19 c0       	rjmp	.+50     	; 0xa5a <vfprintf+0x1b6>
 a28:	82 2d       	mov	r24, r2
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	88 16       	cp	r8, r24
 a2e:	99 06       	cpc	r9, r25
 a30:	a0 f4       	brcc	.+40     	; 0xa5a <vfprintf+0x1b6>
 a32:	b6 01       	movw	r22, r12
 a34:	80 e2       	ldi	r24, 0x20	; 32
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	1d d1       	rcall	.+570    	; 0xc74 <fputc>
 a3a:	2a 94       	dec	r2
 a3c:	f5 cf       	rjmp	.-22     	; 0xa28 <vfprintf+0x184>
 a3e:	f5 01       	movw	r30, r10
 a40:	37 fc       	sbrc	r3, 7
 a42:	85 91       	lpm	r24, Z+
 a44:	37 fe       	sbrs	r3, 7
 a46:	81 91       	ld	r24, Z+
 a48:	5f 01       	movw	r10, r30
 a4a:	b6 01       	movw	r22, r12
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	12 d1       	rcall	.+548    	; 0xc74 <fputc>
 a50:	21 10       	cpse	r2, r1
 a52:	2a 94       	dec	r2
 a54:	21 e0       	ldi	r18, 0x01	; 1
 a56:	82 1a       	sub	r8, r18
 a58:	91 08       	sbc	r9, r1
 a5a:	81 14       	cp	r8, r1
 a5c:	91 04       	cpc	r9, r1
 a5e:	79 f7       	brne	.-34     	; 0xa3e <vfprintf+0x19a>
 a60:	e1 c0       	rjmp	.+450    	; 0xc24 <vfprintf+0x380>
 a62:	84 36       	cpi	r24, 0x64	; 100
 a64:	11 f0       	breq	.+4      	; 0xa6a <vfprintf+0x1c6>
 a66:	89 36       	cpi	r24, 0x69	; 105
 a68:	39 f5       	brne	.+78     	; 0xab8 <vfprintf+0x214>
 a6a:	f8 01       	movw	r30, r16
 a6c:	37 fe       	sbrs	r3, 7
 a6e:	07 c0       	rjmp	.+14     	; 0xa7e <vfprintf+0x1da>
 a70:	60 81       	ld	r22, Z
 a72:	71 81       	ldd	r23, Z+1	; 0x01
 a74:	82 81       	ldd	r24, Z+2	; 0x02
 a76:	93 81       	ldd	r25, Z+3	; 0x03
 a78:	0c 5f       	subi	r16, 0xFC	; 252
 a7a:	1f 4f       	sbci	r17, 0xFF	; 255
 a7c:	08 c0       	rjmp	.+16     	; 0xa8e <vfprintf+0x1ea>
 a7e:	60 81       	ld	r22, Z
 a80:	71 81       	ldd	r23, Z+1	; 0x01
 a82:	07 2e       	mov	r0, r23
 a84:	00 0c       	add	r0, r0
 a86:	88 0b       	sbc	r24, r24
 a88:	99 0b       	sbc	r25, r25
 a8a:	0e 5f       	subi	r16, 0xFE	; 254
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	f3 2d       	mov	r31, r3
 a90:	ff 76       	andi	r31, 0x6F	; 111
 a92:	3f 2e       	mov	r3, r31
 a94:	97 ff       	sbrs	r25, 7
 a96:	09 c0       	rjmp	.+18     	; 0xaaa <vfprintf+0x206>
 a98:	90 95       	com	r25
 a9a:	80 95       	com	r24
 a9c:	70 95       	com	r23
 a9e:	61 95       	neg	r22
 aa0:	7f 4f       	sbci	r23, 0xFF	; 255
 aa2:	8f 4f       	sbci	r24, 0xFF	; 255
 aa4:	9f 4f       	sbci	r25, 0xFF	; 255
 aa6:	f0 68       	ori	r31, 0x80	; 128
 aa8:	3f 2e       	mov	r3, r31
 aaa:	2a e0       	ldi	r18, 0x0A	; 10
 aac:	30 e0       	ldi	r19, 0x00	; 0
 aae:	a3 01       	movw	r20, r6
 ab0:	1d d1       	rcall	.+570    	; 0xcec <__ultoa_invert>
 ab2:	88 2e       	mov	r8, r24
 ab4:	86 18       	sub	r8, r6
 ab6:	44 c0       	rjmp	.+136    	; 0xb40 <vfprintf+0x29c>
 ab8:	85 37       	cpi	r24, 0x75	; 117
 aba:	31 f4       	brne	.+12     	; 0xac8 <vfprintf+0x224>
 abc:	23 2d       	mov	r18, r3
 abe:	2f 7e       	andi	r18, 0xEF	; 239
 ac0:	b2 2e       	mov	r11, r18
 ac2:	2a e0       	ldi	r18, 0x0A	; 10
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	25 c0       	rjmp	.+74     	; 0xb12 <vfprintf+0x26e>
 ac8:	93 2d       	mov	r25, r3
 aca:	99 7f       	andi	r25, 0xF9	; 249
 acc:	b9 2e       	mov	r11, r25
 ace:	8f 36       	cpi	r24, 0x6F	; 111
 ad0:	c1 f0       	breq	.+48     	; 0xb02 <vfprintf+0x25e>
 ad2:	18 f4       	brcc	.+6      	; 0xada <vfprintf+0x236>
 ad4:	88 35       	cpi	r24, 0x58	; 88
 ad6:	79 f0       	breq	.+30     	; 0xaf6 <vfprintf+0x252>
 ad8:	ae c0       	rjmp	.+348    	; 0xc36 <vfprintf+0x392>
 ada:	80 37       	cpi	r24, 0x70	; 112
 adc:	19 f0       	breq	.+6      	; 0xae4 <vfprintf+0x240>
 ade:	88 37       	cpi	r24, 0x78	; 120
 ae0:	21 f0       	breq	.+8      	; 0xaea <vfprintf+0x246>
 ae2:	a9 c0       	rjmp	.+338    	; 0xc36 <vfprintf+0x392>
 ae4:	e9 2f       	mov	r30, r25
 ae6:	e0 61       	ori	r30, 0x10	; 16
 ae8:	be 2e       	mov	r11, r30
 aea:	b4 fe       	sbrs	r11, 4
 aec:	0d c0       	rjmp	.+26     	; 0xb08 <vfprintf+0x264>
 aee:	fb 2d       	mov	r31, r11
 af0:	f4 60       	ori	r31, 0x04	; 4
 af2:	bf 2e       	mov	r11, r31
 af4:	09 c0       	rjmp	.+18     	; 0xb08 <vfprintf+0x264>
 af6:	34 fe       	sbrs	r3, 4
 af8:	0a c0       	rjmp	.+20     	; 0xb0e <vfprintf+0x26a>
 afa:	29 2f       	mov	r18, r25
 afc:	26 60       	ori	r18, 0x06	; 6
 afe:	b2 2e       	mov	r11, r18
 b00:	06 c0       	rjmp	.+12     	; 0xb0e <vfprintf+0x26a>
 b02:	28 e0       	ldi	r18, 0x08	; 8
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	05 c0       	rjmp	.+10     	; 0xb12 <vfprintf+0x26e>
 b08:	20 e1       	ldi	r18, 0x10	; 16
 b0a:	30 e0       	ldi	r19, 0x00	; 0
 b0c:	02 c0       	rjmp	.+4      	; 0xb12 <vfprintf+0x26e>
 b0e:	20 e1       	ldi	r18, 0x10	; 16
 b10:	32 e0       	ldi	r19, 0x02	; 2
 b12:	f8 01       	movw	r30, r16
 b14:	b7 fe       	sbrs	r11, 7
 b16:	07 c0       	rjmp	.+14     	; 0xb26 <vfprintf+0x282>
 b18:	60 81       	ld	r22, Z
 b1a:	71 81       	ldd	r23, Z+1	; 0x01
 b1c:	82 81       	ldd	r24, Z+2	; 0x02
 b1e:	93 81       	ldd	r25, Z+3	; 0x03
 b20:	0c 5f       	subi	r16, 0xFC	; 252
 b22:	1f 4f       	sbci	r17, 0xFF	; 255
 b24:	06 c0       	rjmp	.+12     	; 0xb32 <vfprintf+0x28e>
 b26:	60 81       	ld	r22, Z
 b28:	71 81       	ldd	r23, Z+1	; 0x01
 b2a:	80 e0       	ldi	r24, 0x00	; 0
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	0e 5f       	subi	r16, 0xFE	; 254
 b30:	1f 4f       	sbci	r17, 0xFF	; 255
 b32:	a3 01       	movw	r20, r6
 b34:	db d0       	rcall	.+438    	; 0xcec <__ultoa_invert>
 b36:	88 2e       	mov	r8, r24
 b38:	86 18       	sub	r8, r6
 b3a:	fb 2d       	mov	r31, r11
 b3c:	ff 77       	andi	r31, 0x7F	; 127
 b3e:	3f 2e       	mov	r3, r31
 b40:	36 fe       	sbrs	r3, 6
 b42:	0d c0       	rjmp	.+26     	; 0xb5e <vfprintf+0x2ba>
 b44:	23 2d       	mov	r18, r3
 b46:	2e 7f       	andi	r18, 0xFE	; 254
 b48:	a2 2e       	mov	r10, r18
 b4a:	89 14       	cp	r8, r9
 b4c:	58 f4       	brcc	.+22     	; 0xb64 <vfprintf+0x2c0>
 b4e:	34 fe       	sbrs	r3, 4
 b50:	0b c0       	rjmp	.+22     	; 0xb68 <vfprintf+0x2c4>
 b52:	32 fc       	sbrc	r3, 2
 b54:	09 c0       	rjmp	.+18     	; 0xb68 <vfprintf+0x2c4>
 b56:	83 2d       	mov	r24, r3
 b58:	8e 7e       	andi	r24, 0xEE	; 238
 b5a:	a8 2e       	mov	r10, r24
 b5c:	05 c0       	rjmp	.+10     	; 0xb68 <vfprintf+0x2c4>
 b5e:	b8 2c       	mov	r11, r8
 b60:	a3 2c       	mov	r10, r3
 b62:	03 c0       	rjmp	.+6      	; 0xb6a <vfprintf+0x2c6>
 b64:	b8 2c       	mov	r11, r8
 b66:	01 c0       	rjmp	.+2      	; 0xb6a <vfprintf+0x2c6>
 b68:	b9 2c       	mov	r11, r9
 b6a:	a4 fe       	sbrs	r10, 4
 b6c:	0f c0       	rjmp	.+30     	; 0xb8c <vfprintf+0x2e8>
 b6e:	fe 01       	movw	r30, r28
 b70:	e8 0d       	add	r30, r8
 b72:	f1 1d       	adc	r31, r1
 b74:	80 81       	ld	r24, Z
 b76:	80 33       	cpi	r24, 0x30	; 48
 b78:	21 f4       	brne	.+8      	; 0xb82 <vfprintf+0x2de>
 b7a:	9a 2d       	mov	r25, r10
 b7c:	99 7e       	andi	r25, 0xE9	; 233
 b7e:	a9 2e       	mov	r10, r25
 b80:	09 c0       	rjmp	.+18     	; 0xb94 <vfprintf+0x2f0>
 b82:	a2 fe       	sbrs	r10, 2
 b84:	06 c0       	rjmp	.+12     	; 0xb92 <vfprintf+0x2ee>
 b86:	b3 94       	inc	r11
 b88:	b3 94       	inc	r11
 b8a:	04 c0       	rjmp	.+8      	; 0xb94 <vfprintf+0x2f0>
 b8c:	8a 2d       	mov	r24, r10
 b8e:	86 78       	andi	r24, 0x86	; 134
 b90:	09 f0       	breq	.+2      	; 0xb94 <vfprintf+0x2f0>
 b92:	b3 94       	inc	r11
 b94:	a3 fc       	sbrc	r10, 3
 b96:	10 c0       	rjmp	.+32     	; 0xbb8 <vfprintf+0x314>
 b98:	a0 fe       	sbrs	r10, 0
 b9a:	06 c0       	rjmp	.+12     	; 0xba8 <vfprintf+0x304>
 b9c:	b2 14       	cp	r11, r2
 b9e:	80 f4       	brcc	.+32     	; 0xbc0 <vfprintf+0x31c>
 ba0:	28 0c       	add	r2, r8
 ba2:	92 2c       	mov	r9, r2
 ba4:	9b 18       	sub	r9, r11
 ba6:	0d c0       	rjmp	.+26     	; 0xbc2 <vfprintf+0x31e>
 ba8:	b2 14       	cp	r11, r2
 baa:	58 f4       	brcc	.+22     	; 0xbc2 <vfprintf+0x31e>
 bac:	b6 01       	movw	r22, r12
 bae:	80 e2       	ldi	r24, 0x20	; 32
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	60 d0       	rcall	.+192    	; 0xc74 <fputc>
 bb4:	b3 94       	inc	r11
 bb6:	f8 cf       	rjmp	.-16     	; 0xba8 <vfprintf+0x304>
 bb8:	b2 14       	cp	r11, r2
 bba:	18 f4       	brcc	.+6      	; 0xbc2 <vfprintf+0x31e>
 bbc:	2b 18       	sub	r2, r11
 bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <vfprintf+0x320>
 bc0:	98 2c       	mov	r9, r8
 bc2:	21 2c       	mov	r2, r1
 bc4:	a4 fe       	sbrs	r10, 4
 bc6:	0f c0       	rjmp	.+30     	; 0xbe6 <vfprintf+0x342>
 bc8:	b6 01       	movw	r22, r12
 bca:	80 e3       	ldi	r24, 0x30	; 48
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	52 d0       	rcall	.+164    	; 0xc74 <fputc>
 bd0:	a2 fe       	sbrs	r10, 2
 bd2:	16 c0       	rjmp	.+44     	; 0xc00 <vfprintf+0x35c>
 bd4:	a1 fc       	sbrc	r10, 1
 bd6:	03 c0       	rjmp	.+6      	; 0xbde <vfprintf+0x33a>
 bd8:	88 e7       	ldi	r24, 0x78	; 120
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <vfprintf+0x33e>
 bde:	88 e5       	ldi	r24, 0x58	; 88
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	b6 01       	movw	r22, r12
 be4:	0c c0       	rjmp	.+24     	; 0xbfe <vfprintf+0x35a>
 be6:	8a 2d       	mov	r24, r10
 be8:	86 78       	andi	r24, 0x86	; 134
 bea:	51 f0       	breq	.+20     	; 0xc00 <vfprintf+0x35c>
 bec:	a1 fe       	sbrs	r10, 1
 bee:	02 c0       	rjmp	.+4      	; 0xbf4 <vfprintf+0x350>
 bf0:	8b e2       	ldi	r24, 0x2B	; 43
 bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <vfprintf+0x352>
 bf4:	80 e2       	ldi	r24, 0x20	; 32
 bf6:	a7 fc       	sbrc	r10, 7
 bf8:	8d e2       	ldi	r24, 0x2D	; 45
 bfa:	b6 01       	movw	r22, r12
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	3a d0       	rcall	.+116    	; 0xc74 <fputc>
 c00:	89 14       	cp	r8, r9
 c02:	30 f4       	brcc	.+12     	; 0xc10 <vfprintf+0x36c>
 c04:	b6 01       	movw	r22, r12
 c06:	80 e3       	ldi	r24, 0x30	; 48
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	34 d0       	rcall	.+104    	; 0xc74 <fputc>
 c0c:	9a 94       	dec	r9
 c0e:	f8 cf       	rjmp	.-16     	; 0xc00 <vfprintf+0x35c>
 c10:	8a 94       	dec	r8
 c12:	f3 01       	movw	r30, r6
 c14:	e8 0d       	add	r30, r8
 c16:	f1 1d       	adc	r31, r1
 c18:	80 81       	ld	r24, Z
 c1a:	b6 01       	movw	r22, r12
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	2a d0       	rcall	.+84     	; 0xc74 <fputc>
 c20:	81 10       	cpse	r8, r1
 c22:	f6 cf       	rjmp	.-20     	; 0xc10 <vfprintf+0x36c>
 c24:	22 20       	and	r2, r2
 c26:	09 f4       	brne	.+2      	; 0xc2a <vfprintf+0x386>
 c28:	4e ce       	rjmp	.-868    	; 0x8c6 <vfprintf+0x22>
 c2a:	b6 01       	movw	r22, r12
 c2c:	80 e2       	ldi	r24, 0x20	; 32
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	21 d0       	rcall	.+66     	; 0xc74 <fputc>
 c32:	2a 94       	dec	r2
 c34:	f7 cf       	rjmp	.-18     	; 0xc24 <vfprintf+0x380>
 c36:	f6 01       	movw	r30, r12
 c38:	86 81       	ldd	r24, Z+6	; 0x06
 c3a:	97 81       	ldd	r25, Z+7	; 0x07
 c3c:	02 c0       	rjmp	.+4      	; 0xc42 <vfprintf+0x39e>
 c3e:	8f ef       	ldi	r24, 0xFF	; 255
 c40:	9f ef       	ldi	r25, 0xFF	; 255
 c42:	2b 96       	adiw	r28, 0x0b	; 11
 c44:	e2 e1       	ldi	r30, 0x12	; 18
 c46:	cc c0       	rjmp	.+408    	; 0xde0 <__epilogue_restores__>

00000c48 <strnlen_P>:
 c48:	fc 01       	movw	r30, r24
 c4a:	05 90       	lpm	r0, Z+
 c4c:	61 50       	subi	r22, 0x01	; 1
 c4e:	70 40       	sbci	r23, 0x00	; 0
 c50:	01 10       	cpse	r0, r1
 c52:	d8 f7       	brcc	.-10     	; 0xc4a <strnlen_P+0x2>
 c54:	80 95       	com	r24
 c56:	90 95       	com	r25
 c58:	8e 0f       	add	r24, r30
 c5a:	9f 1f       	adc	r25, r31
 c5c:	08 95       	ret

00000c5e <strnlen>:
 c5e:	fc 01       	movw	r30, r24
 c60:	61 50       	subi	r22, 0x01	; 1
 c62:	70 40       	sbci	r23, 0x00	; 0
 c64:	01 90       	ld	r0, Z+
 c66:	01 10       	cpse	r0, r1
 c68:	d8 f7       	brcc	.-10     	; 0xc60 <strnlen+0x2>
 c6a:	80 95       	com	r24
 c6c:	90 95       	com	r25
 c6e:	8e 0f       	add	r24, r30
 c70:	9f 1f       	adc	r25, r31
 c72:	08 95       	ret

00000c74 <fputc>:
 c74:	0f 93       	push	r16
 c76:	1f 93       	push	r17
 c78:	cf 93       	push	r28
 c7a:	df 93       	push	r29
 c7c:	fb 01       	movw	r30, r22
 c7e:	23 81       	ldd	r18, Z+3	; 0x03
 c80:	21 fd       	sbrc	r18, 1
 c82:	03 c0       	rjmp	.+6      	; 0xc8a <fputc+0x16>
 c84:	8f ef       	ldi	r24, 0xFF	; 255
 c86:	9f ef       	ldi	r25, 0xFF	; 255
 c88:	2c c0       	rjmp	.+88     	; 0xce2 <fputc+0x6e>
 c8a:	22 ff       	sbrs	r18, 2
 c8c:	16 c0       	rjmp	.+44     	; 0xcba <fputc+0x46>
 c8e:	46 81       	ldd	r20, Z+6	; 0x06
 c90:	57 81       	ldd	r21, Z+7	; 0x07
 c92:	24 81       	ldd	r18, Z+4	; 0x04
 c94:	35 81       	ldd	r19, Z+5	; 0x05
 c96:	42 17       	cp	r20, r18
 c98:	53 07       	cpc	r21, r19
 c9a:	44 f4       	brge	.+16     	; 0xcac <fputc+0x38>
 c9c:	a0 81       	ld	r26, Z
 c9e:	b1 81       	ldd	r27, Z+1	; 0x01
 ca0:	9d 01       	movw	r18, r26
 ca2:	2f 5f       	subi	r18, 0xFF	; 255
 ca4:	3f 4f       	sbci	r19, 0xFF	; 255
 ca6:	31 83       	std	Z+1, r19	; 0x01
 ca8:	20 83       	st	Z, r18
 caa:	8c 93       	st	X, r24
 cac:	26 81       	ldd	r18, Z+6	; 0x06
 cae:	37 81       	ldd	r19, Z+7	; 0x07
 cb0:	2f 5f       	subi	r18, 0xFF	; 255
 cb2:	3f 4f       	sbci	r19, 0xFF	; 255
 cb4:	37 83       	std	Z+7, r19	; 0x07
 cb6:	26 83       	std	Z+6, r18	; 0x06
 cb8:	14 c0       	rjmp	.+40     	; 0xce2 <fputc+0x6e>
 cba:	8b 01       	movw	r16, r22
 cbc:	ec 01       	movw	r28, r24
 cbe:	fb 01       	movw	r30, r22
 cc0:	00 84       	ldd	r0, Z+8	; 0x08
 cc2:	f1 85       	ldd	r31, Z+9	; 0x09
 cc4:	e0 2d       	mov	r30, r0
 cc6:	09 95       	icall
 cc8:	89 2b       	or	r24, r25
 cca:	e1 f6       	brne	.-72     	; 0xc84 <fputc+0x10>
 ccc:	d8 01       	movw	r26, r16
 cce:	16 96       	adiw	r26, 0x06	; 6
 cd0:	8d 91       	ld	r24, X+
 cd2:	9c 91       	ld	r25, X
 cd4:	17 97       	sbiw	r26, 0x07	; 7
 cd6:	01 96       	adiw	r24, 0x01	; 1
 cd8:	17 96       	adiw	r26, 0x07	; 7
 cda:	9c 93       	st	X, r25
 cdc:	8e 93       	st	-X, r24
 cde:	16 97       	sbiw	r26, 0x06	; 6
 ce0:	ce 01       	movw	r24, r28
 ce2:	df 91       	pop	r29
 ce4:	cf 91       	pop	r28
 ce6:	1f 91       	pop	r17
 ce8:	0f 91       	pop	r16
 cea:	08 95       	ret

00000cec <__ultoa_invert>:
 cec:	fa 01       	movw	r30, r20
 cee:	aa 27       	eor	r26, r26
 cf0:	28 30       	cpi	r18, 0x08	; 8
 cf2:	51 f1       	breq	.+84     	; 0xd48 <__ultoa_invert+0x5c>
 cf4:	20 31       	cpi	r18, 0x10	; 16
 cf6:	81 f1       	breq	.+96     	; 0xd58 <__ultoa_invert+0x6c>
 cf8:	e8 94       	clt
 cfa:	6f 93       	push	r22
 cfc:	6e 7f       	andi	r22, 0xFE	; 254
 cfe:	6e 5f       	subi	r22, 0xFE	; 254
 d00:	7f 4f       	sbci	r23, 0xFF	; 255
 d02:	8f 4f       	sbci	r24, 0xFF	; 255
 d04:	9f 4f       	sbci	r25, 0xFF	; 255
 d06:	af 4f       	sbci	r26, 0xFF	; 255
 d08:	b1 e0       	ldi	r27, 0x01	; 1
 d0a:	3e d0       	rcall	.+124    	; 0xd88 <__ultoa_invert+0x9c>
 d0c:	b4 e0       	ldi	r27, 0x04	; 4
 d0e:	3c d0       	rcall	.+120    	; 0xd88 <__ultoa_invert+0x9c>
 d10:	67 0f       	add	r22, r23
 d12:	78 1f       	adc	r23, r24
 d14:	89 1f       	adc	r24, r25
 d16:	9a 1f       	adc	r25, r26
 d18:	a1 1d       	adc	r26, r1
 d1a:	68 0f       	add	r22, r24
 d1c:	79 1f       	adc	r23, r25
 d1e:	8a 1f       	adc	r24, r26
 d20:	91 1d       	adc	r25, r1
 d22:	a1 1d       	adc	r26, r1
 d24:	6a 0f       	add	r22, r26
 d26:	71 1d       	adc	r23, r1
 d28:	81 1d       	adc	r24, r1
 d2a:	91 1d       	adc	r25, r1
 d2c:	a1 1d       	adc	r26, r1
 d2e:	20 d0       	rcall	.+64     	; 0xd70 <__ultoa_invert+0x84>
 d30:	09 f4       	brne	.+2      	; 0xd34 <__ultoa_invert+0x48>
 d32:	68 94       	set
 d34:	3f 91       	pop	r19
 d36:	2a e0       	ldi	r18, 0x0A	; 10
 d38:	26 9f       	mul	r18, r22
 d3a:	11 24       	eor	r1, r1
 d3c:	30 19       	sub	r19, r0
 d3e:	30 5d       	subi	r19, 0xD0	; 208
 d40:	31 93       	st	Z+, r19
 d42:	de f6       	brtc	.-74     	; 0xcfa <__ultoa_invert+0xe>
 d44:	cf 01       	movw	r24, r30
 d46:	08 95       	ret
 d48:	46 2f       	mov	r20, r22
 d4a:	47 70       	andi	r20, 0x07	; 7
 d4c:	40 5d       	subi	r20, 0xD0	; 208
 d4e:	41 93       	st	Z+, r20
 d50:	b3 e0       	ldi	r27, 0x03	; 3
 d52:	0f d0       	rcall	.+30     	; 0xd72 <__ultoa_invert+0x86>
 d54:	c9 f7       	brne	.-14     	; 0xd48 <__ultoa_invert+0x5c>
 d56:	f6 cf       	rjmp	.-20     	; 0xd44 <__ultoa_invert+0x58>
 d58:	46 2f       	mov	r20, r22
 d5a:	4f 70       	andi	r20, 0x0F	; 15
 d5c:	40 5d       	subi	r20, 0xD0	; 208
 d5e:	4a 33       	cpi	r20, 0x3A	; 58
 d60:	18 f0       	brcs	.+6      	; 0xd68 <__ultoa_invert+0x7c>
 d62:	49 5d       	subi	r20, 0xD9	; 217
 d64:	31 fd       	sbrc	r19, 1
 d66:	40 52       	subi	r20, 0x20	; 32
 d68:	41 93       	st	Z+, r20
 d6a:	02 d0       	rcall	.+4      	; 0xd70 <__ultoa_invert+0x84>
 d6c:	a9 f7       	brne	.-22     	; 0xd58 <__ultoa_invert+0x6c>
 d6e:	ea cf       	rjmp	.-44     	; 0xd44 <__ultoa_invert+0x58>
 d70:	b4 e0       	ldi	r27, 0x04	; 4
 d72:	a6 95       	lsr	r26
 d74:	97 95       	ror	r25
 d76:	87 95       	ror	r24
 d78:	77 95       	ror	r23
 d7a:	67 95       	ror	r22
 d7c:	ba 95       	dec	r27
 d7e:	c9 f7       	brne	.-14     	; 0xd72 <__ultoa_invert+0x86>
 d80:	00 97       	sbiw	r24, 0x00	; 0
 d82:	61 05       	cpc	r22, r1
 d84:	71 05       	cpc	r23, r1
 d86:	08 95       	ret
 d88:	9b 01       	movw	r18, r22
 d8a:	ac 01       	movw	r20, r24
 d8c:	0a 2e       	mov	r0, r26
 d8e:	06 94       	lsr	r0
 d90:	57 95       	ror	r21
 d92:	47 95       	ror	r20
 d94:	37 95       	ror	r19
 d96:	27 95       	ror	r18
 d98:	ba 95       	dec	r27
 d9a:	c9 f7       	brne	.-14     	; 0xd8e <__ultoa_invert+0xa2>
 d9c:	62 0f       	add	r22, r18
 d9e:	73 1f       	adc	r23, r19
 da0:	84 1f       	adc	r24, r20
 da2:	95 1f       	adc	r25, r21
 da4:	a0 1d       	adc	r26, r0
 da6:	08 95       	ret

00000da8 <__prologue_saves__>:
 da8:	2f 92       	push	r2
 daa:	3f 92       	push	r3
 dac:	4f 92       	push	r4
 dae:	5f 92       	push	r5
 db0:	6f 92       	push	r6
 db2:	7f 92       	push	r7
 db4:	8f 92       	push	r8
 db6:	9f 92       	push	r9
 db8:	af 92       	push	r10
 dba:	bf 92       	push	r11
 dbc:	cf 92       	push	r12
 dbe:	df 92       	push	r13
 dc0:	ef 92       	push	r14
 dc2:	ff 92       	push	r15
 dc4:	0f 93       	push	r16
 dc6:	1f 93       	push	r17
 dc8:	cf 93       	push	r28
 dca:	df 93       	push	r29
 dcc:	cd b7       	in	r28, 0x3d	; 61
 dce:	de b7       	in	r29, 0x3e	; 62
 dd0:	ca 1b       	sub	r28, r26
 dd2:	db 0b       	sbc	r29, r27
 dd4:	0f b6       	in	r0, 0x3f	; 63
 dd6:	f8 94       	cli
 dd8:	de bf       	out	0x3e, r29	; 62
 dda:	0f be       	out	0x3f, r0	; 63
 ddc:	cd bf       	out	0x3d, r28	; 61
 dde:	09 94       	ijmp

00000de0 <__epilogue_restores__>:
 de0:	2a 88       	ldd	r2, Y+18	; 0x12
 de2:	39 88       	ldd	r3, Y+17	; 0x11
 de4:	48 88       	ldd	r4, Y+16	; 0x10
 de6:	5f 84       	ldd	r5, Y+15	; 0x0f
 de8:	6e 84       	ldd	r6, Y+14	; 0x0e
 dea:	7d 84       	ldd	r7, Y+13	; 0x0d
 dec:	8c 84       	ldd	r8, Y+12	; 0x0c
 dee:	9b 84       	ldd	r9, Y+11	; 0x0b
 df0:	aa 84       	ldd	r10, Y+10	; 0x0a
 df2:	b9 84       	ldd	r11, Y+9	; 0x09
 df4:	c8 84       	ldd	r12, Y+8	; 0x08
 df6:	df 80       	ldd	r13, Y+7	; 0x07
 df8:	ee 80       	ldd	r14, Y+6	; 0x06
 dfa:	fd 80       	ldd	r15, Y+5	; 0x05
 dfc:	0c 81       	ldd	r16, Y+4	; 0x04
 dfe:	1b 81       	ldd	r17, Y+3	; 0x03
 e00:	aa 81       	ldd	r26, Y+2	; 0x02
 e02:	b9 81       	ldd	r27, Y+1	; 0x01
 e04:	ce 0f       	add	r28, r30
 e06:	d1 1d       	adc	r29, r1
 e08:	0f b6       	in	r0, 0x3f	; 63
 e0a:	f8 94       	cli
 e0c:	de bf       	out	0x3e, r29	; 62
 e0e:	0f be       	out	0x3f, r0	; 63
 e10:	cd bf       	out	0x3d, r28	; 61
 e12:	ed 01       	movw	r28, r26
 e14:	08 95       	ret

00000e16 <_exit>:
 e16:	f8 94       	cli

00000e18 <__stop_program>:
 e18:	ff cf       	rjmp	.-2      	; 0xe18 <__stop_program>
